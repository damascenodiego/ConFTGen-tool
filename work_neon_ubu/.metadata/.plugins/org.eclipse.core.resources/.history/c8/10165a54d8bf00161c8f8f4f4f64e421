package sequences;

import static org.junit.Assert.fail;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Logger;

import org.junit.Test;

import br.usp.icmc.feature.logic.FFSMProperties;
import br.usp.icmc.ffsm.Cond_in_seq;
import br.usp.icmc.fsm.common.FileHandler;
import br.usp.icmc.fsm.common.FiniteStateMachine;
import br.usp.icmc.fsm.common.State;
import br.usp.icmc.fsm.common.TestSequence;
import br.usp.icmc.fsm.common.Transition;
import br.usp.icmc.fsm.constructor.CharacterizationSetConstructor;
import br.usp.icmc.fsm.constructor.HarmonizedIdentifiersConstructor;
import br.usp.icmc.fsm.constructor.TestingTreeSetsConstructor;
import br.usp.icmc.model_gen.FFSMModel;
import br.usp.icmc.reader.FFSMModelReaderUML;
import br.usp.icmc.reader.FsmModelReader;
import br.usp.icmc.uml.CState;
import br.usp.icmc.uml.CState.StateType;
import br.usp.icmc.uml.CTransition;
import br.usp.icmc.uml.HFFSM;

public class FFSM_DSequencesTest 
{
	private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	
	@Test
	public void test_FSM_HSI()
	{
		System.out.println("-----------------------------------------");
		System.out.println("TEST FSM HSI Generation");
		try {			
			String folder = "./derived/";			
			String fsm_name = "fsm_derived_2";
			String fsm_file = folder+fsm_name+".txt";
			
			File file = new File(fsm_file);
			FsmModelReader reader = new FsmModelReader(file, true);
			FiniteStateMachine fsm = reader.getFsm();
			
			TestingTreeSetsConstructor cov = new TestingTreeSetsConstructor(fsm);
			cov.construct();
			System.out.println("STATE COVER SET "+TestSequence.getNoPrefixes(cov.getStateCover()));
			System.out.println("TRANSITION COVER SET ");
			ArrayList<String> tcover = TestSequence.getNoPrefixes(cov.getTransitionCover());
			tcover = TestSequence.getNoPrefixes(tcover);			
			for(String o : tcover){
				System.out.println(o);
			}
			
			CharacterizationSetConstructor csc = new CharacterizationSetConstructor(fsm);
			System.out.println("W SET "+csc.getWset());
			
			System.out.println("HSI sets");
			HarmonizedIdentifiersConstructor h = new HarmonizedIdentifiersConstructor(fsm, csc.getWset());
			for(State s : fsm.getStates()){
				System.out.println("State "+s+" "+h.getHi(s));				
			}
			
			//generate test suite
			ArrayList<String> suite = new ArrayList<String>(); 
			for(State s : fsm.getStates()){				
				for(String sequence : cov.getTransitionCover()){
					ArrayList<Transition> list = fsm.reachedTransitionsWithSequence(fsm.getInitialState(), sequence);
					if(list.size() > 0){
						State reach = list.get(list.size()-1).getOut();
						//System.out.println("LIST "+list+" "+reach);
						if(s.equals(reach)){
							for(String i : h.getHi(s)){
								String test = sequence+","+i;
								suite.add(test);
							}
						}
					}
				}				
			}
			System.out.println("HSI SUITE ");
			suite = TestSequence.getNoPrefixes(suite);
			suite = TestSequence.orderSet(suite);
			for(String o : suite){
				System.out.println(o);
			}
			
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			fail();
		}
	}	
	
	@Test
	public void test_chain() {				
		boolean islog = false;
		boolean debug = true;
		
		String folder = "./uml/";
		String ffsm_name = "ffsm.txt";
		String fm_name = "fm_agm.xml";
		String uml_name = "ffsm.uml";
		
		FFSMProperties p = new FFSMProperties(folder, islog, debug);
		String header = p.read_XML_FeatureModel(folder+fm_name);
		
		String uml_path = folder+uml_name;
		File uml_file = new File(uml_path);
		String file_path = folder+ffsm_name;
		
		try {
			// generate intermediate FFSM
			FFSMModelReaderUML reader = new FFSMModelReaderUML(uml_file);
			//FFSMModelReaderYAKINDU reader = new FFSMModelReaderYAKINDU(uml_file);
			String model = reader.generate_FFSM_interm();
			FileHandler fh = new FileHandler();		
			fh.print_file(model, file_path);
			
			//check states and transitions
			if(!p.set_checkFFSM(file_path, header)){
				System.out.println("Invalid FFSM!!!");
				return;
			}	
			
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}
	
	@Test
	public void test_derive_model() {
		System.out.println("-----------------------------------------");
		System.out.println("TEST Model Derivation");
		try {			
			boolean islog = false;
			boolean debug = true;	
			boolean pop_unix_pdf = true;
			
			String folder = "./uml/";
			String ffsm_name = "ffsm.txt";
			String fm_name = "fm_agm.xml";			
			String name = "ffsm_derived";
			String fsm = "fsm_derived";
			
			FFSMProperties p = new FFSMProperties(folder, islog, debug);
			String header = p.read_XML_FeatureModel(folder+fm_name);			
			String file = folder+ffsm_name;
			//check states and transitions
			if(!p.set_checkFFSM(file, header)){
				System.out.println("Invalid FFSM!!!");
				return;
			}		
			String[] ops = {"(and B (not S))", "(and B S)", "(and N (not S))",
					"(and N S)", "(and W (not S))", "(and W S)"};
			//String[] ops = {"S", "(not S)"};
			int count = 1;
			folder = "./derived/";
			for(String op : ops){
				String _fsm = fsm+"_"+count;
				String _name = name+"_"+count;
				System.out.println("Derivation operator: "+op);
				System.out.println("Derive FSM model "+count);
				//p.derive_FFSM(folder, _name, op, pop_unix_pdf);
				p.derive_FSM(folder, _fsm, op, pop_unix_pdf);
				count++;
			}		
	    		    			
		} catch (Exception ex) {
			ex.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void test_gen_inter_model() {
		System.out.println("-----------------------------------------");
		System.out.println("TEST Transitions");
		try {
			File file = new File("./uml/ffsm.uml");
			FFSMModelReaderUML reader = new FFSMModelReaderUML(file);
			String model = reader.generate_FFSM_interm();
			FileHandler fh = new FileHandler();
			String path = "./uml/ffsm.txt";
			fh.print_file(model, path);
			
		} catch (Exception ex) {
			ex.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void test_state_structure_UML() {
		System.out.println("-----------------------------------------");
		System.out.println("TEST 01");
		try {
			// File file = new File("./uml/bcs.uml");
			File file = new File("./uml/ffsm.uml");
			FFSMModelReaderUML reader = new FFSMModelReaderUML(file);
			HFFSM hsm = reader.getHsm();
			System.out.println("Root ->" + hsm.getStruct().getRoot());

			System.out.println("-----------------------------------------");
			hsm.getStruct().print();
		} catch (Exception ex) {
			ex.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void test_read_FFSM_UML() {
		System.out.println("-----------------------------------------");
		System.out.println("TEST Transitions");
		try {
			// File file = new File("./uml/bcs.uml");
			File file = new File("./uml/ffsm.uml");
			FFSMModelReaderUML reader = new FFSMModelReaderUML(file);
			HFFSM hsm = reader.getHsm();
			System.out.println("Transitions");
			CState init = null;			
			CState root = hsm.getStruct().getRoot();
			ArrayList<CState> states = hsm.getStruct().getStateSet();
			for(CState cs : states){
				if(cs.getDefault() && !cs.equals(root) && !cs.getType().equals(StateType.region)){
					init = cs;
					break;
				}
			}			
			states.remove(init);
			String file_log = "";
			for(CTransition t : hsm.getTransitions()){
				if(t.getSource().equals(init)){
					file_log = file_log.concat(t+"\n");
				}
			}
			for(CState c : states){
				for(CTransition t : hsm.getTransitions()){
					if(t.getSource().equals(c)){
						file_log = file_log.concat(t+"\n");
					}
				}
			}
			System.out.println(file_log);
			//for (CTransition t : hsm.getTransitions()) {
			//	System.out.println(t);
			//}
			System.out.println("-----------------------------------------");
		} catch (Exception ex) {
			ex.printStackTrace();
			fail();
		}
	}
	

	@Test
	public void gen_random_ffsm() throws IOException	{
		//random
		//number of states 5-20
		//number of inputs 5-20
		//number of outputs 5-20
		//number of transitions 25-400
		//number of features 5-10
		//number of attempts 1000
		//transition target random to any other
		
		String[] features = {"A","B","C","D","E","F","G","H","I","J"};
		
		FileHandler fh = new FileHandler();
		String path = "";
		String result = "";
		int seed = 1000;
		Random ran = new Random();
		//randomize values
		int max_states = 10;
		int min_states = 5;
		int max_inputs = 10;
		int min_inputs = 5;
		int max_outputs = 10;
		int min_outputs = 5;
		int max_transitions = max_states * max_inputs;
		int min_transitions = min_states * min_inputs;
				
		int state_seed = max_states - min_states;
		int input_seed = max_inputs - min_inputs;
		int output_seed = max_outputs - min_outputs;
		int transition_seed = max_transitions - min_transitions;
		
		for(int i=1; i<10; i++){
			path = "./../../../../Documents/experiments/ffsm/ffsm_"+i+".txt";
			int n_states = ran.nextInt(state_seed) + min_states;
			int n_inputs = ran.nextInt(input_seed) + min_inputs;
			int n_outputs = ran.nextInt(output_seed) + min_outputs;
			int n_transitions = ran.nextInt(transition_seed) + min_transitions;
			result = "";
			for(int t=1; t<n_transitions; t++){
				int source = ran.nextInt(n_states)+1;
				int in = ran.nextInt(n_inputs)+1;
				int out = ran.nextInt(n_outputs)+1;
				String cond = features[ran.nextInt(features.length)];
				int target = ran.nextInt(n_states)+1;
				String tr = source+"@true -- "+in+"@"+cond+"/"+out+" -> "+target+"@true";
				result = result.concat(tr+"\n");
			}
			
			//result = ran.nextInt(seed)+"";
			fh.print_file(result, path);
			System.out.println(result);
		}
			
		
		
		
		//int inputs = ran.nextInt(seed);
		
	}
	
	@Test
	public void test_hsi()	{
		
		boolean islog = false;
		boolean debug = true;
		
		String folder = "./agm/";
		String ffsm_name = "ffsm_agm2.txt";
		String fm_name = "fm_agm.xml";
		
		FFSMProperties p = new FFSMProperties(folder, islog, debug);
		String header = p.read_XML_FeatureModel(folder+fm_name);
		
		String file = folder+ffsm_name;
		try {
			//check states and transitions
			if(!p.set_checkFFSM(file, header)){
				System.out.println("Invalid FFSM!!!");
				return;
			}	
			//get transition cover
			System.out.println("=========");
			//find state cover set in innitially connected property
			//then add transitions with paths
			if(p.is_initially_connected()){
				p.find_transition_cover_set();
			}
			//print conditional state tree			
	    	String dot_name = "ffsm_agm2_state";	    	
	    	p.gen_state_tree(folder, dot_name, true);
	    	//print conditional transition tree			
	    	String dot_name2 = "ffsm_agm2_transition";	    	
	    	p.gen_transition_tree(folder, dot_name2, true);
			
			//get distinguish sequences
			p.find_disting_seq();
			p.print_predecessor_table();
			p.generate_W_set();
			//get hsi sets 
			p.generate_hsi_table();			
			//concatenate and generate test suite
			p.gen_hsi();
			
			//derivation operator
			String der_op = "(and B S)";
			System.out.println("Derivation operator: "+der_op);			
			
			System.out.println("Derive state cover suite");
			ArrayList<Cond_in_seq> suite = p.getStateSet();
			p.derive_suite(suite, der_op);
			
			System.out.println("Derive transition cover suite");
			suite = p.getTransitionSet();
			p.derive_suite(suite, der_op);
			
			System.out.println("Derive HSI suite");
			suite = p.getHSISet();
			p.derive_suite(suite, der_op);
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}
	
	@Test
	public void test_valid_pairs() throws IOException	{
		
		String log = "";
		boolean islog = true;
		boolean debug = false;
		
		String folder = "agm";
		String ffsm_name = "ffsm_agm2";
		String fm_name = "fm_agm";
		FFSMProperties p = new FFSMProperties(folder, islog, debug);		
		if(islog) log = log.concat("Reading Feature Model (.xml)"+"\n");
		String header = p.read_XML_FeatureModel("./"+folder+"/"+fm_name+".xml");
		if(islog) log = log.concat(p.getlog()+"\n");
		
		for(int i=1; i<=1; i++){
			String file = "./"+folder+"/"+ffsm_name+".txt";
			try {
				if(!p.set_checkFFSM(file, header)){
					System.out.println("Invalid FFSM!!!");
					return;
				}
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(islog) log = log.concat("---------------------------------------\n");
			if(islog) log = log.concat("\nIdentify Deterministic...\n");
			boolean is1 = p.is_deterministic();	
			if(islog) log = log.concat(p.getlog()+"\n");
			if(!is1){
				System.out.println("Not deterministic!");
				return;
			}
			
			if(islog) log = log.concat("---------------------------------------\n");
			if(islog) log = log.concat("\nIdentify Complete...\n");			
			boolean is2 = p.is_complete();
			if(islog) log = log.concat(p.getlog()+"\n");
			System.out.println("complete");
			
			if(islog) log = log.concat("---------------------------------------\n");
			if(islog) log = log.concat("\nIdentify Initially Connected...\n");					
			boolean is3 = p.is_initially_connected();
			if(islog) log = log.concat(p.getlog()+"\n");
			System.out.println("init");
			if(!is3){
				System.out.println("Not initially connected!");
				return;
			}
			
			if(islog) log = log.concat("---------------------------------------\n");
			if(islog) log = log.concat("\nIdentify Minimal...\n");			
			boolean is4 = p.is_minimal();
			if(islog) log = log.concat(p.getlog()+"\n");
			System.out.println("minimal");
			
			if(islog) log = log.concat("---------------------------------------\n");
			if(islog) log = log.concat("\nIs the FFSM deterministic?\n");
			if(islog) log = log.concat(is1+"\n");
			
			if(islog) log = log.concat("\nIs the FFSM complete?\n");					
			if(islog) log = log.concat(is2+"\n");
			
			if(islog) log = log.concat("\nIs the FFSM initially connected?\n");	
			if(islog) log = log.concat(is3+"\n");			
			
			if(islog) log = log.concat("\nIs the FFSM minimal?\n");			
			if(islog) log = log.concat(is4+"\n");
			
			if(islog) LOGGER.info(""+log);			
		}
		//System.out.println(log);
		String fpath = "./logs/FFSM_properties.txt";
		FileHandler fh = new FileHandler();
		fh.print_file(log, fpath);
	}
	
	@Test
	public void test_generate_dot_ffsm() throws InterruptedException
	{
		FFSMModel gen = new FFSMModel();
	    try {
	    	//String folder = "./largeSPL/";
	    	//String name = "ffsm_largeSPL";
	    	String folder = "./agm/";
	    	String name = "ffsm_agm2";
	    	String dotpath = folder+name+".dot";
	    	String ffsm_path = folder+name+".txt";
	    	gen.gen_dot_FFSM2(ffsm_path, dotpath, folder, name, true);
	    } catch (IOException e) {
	      e.printStackTrace();
	      throw new RuntimeException("Problems with creating the ffsm model files");
	    } 
	}	
	
}
